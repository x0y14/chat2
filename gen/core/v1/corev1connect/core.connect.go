// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: core/v1/core.proto

package corev1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/x0y14/chat2/gen/core/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// CoreServiceName is the fully-qualified name of the CoreService service.
	CoreServiceName = "core.v1.CoreService"
)

// CoreServiceClient is a client for the core.v1.CoreService service.
type CoreServiceClient interface {
	SendMessage(context.Context, *connect_go.Request[v1.SendMessageRequest]) (*connect_go.Response[v1.SendMessageResponse], error)
	FetchOps(context.Context, *connect_go.Request[v1.FetchOpsRequest]) (*connect_go.ServerStreamForClient[v1.FetchOpsResponse], error)
	GetProfile(context.Context, *connect_go.Request[v1.GetProfileRequest]) (*connect_go.Response[v1.GetProfileResponse], error)
}

// NewCoreServiceClient constructs a client for the core.v1.CoreService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCoreServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) CoreServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &coreServiceClient{
		sendMessage: connect_go.NewClient[v1.SendMessageRequest, v1.SendMessageResponse](
			httpClient,
			baseURL+"/core.v1.CoreService/SendMessage",
			opts...,
		),
		fetchOps: connect_go.NewClient[v1.FetchOpsRequest, v1.FetchOpsResponse](
			httpClient,
			baseURL+"/core.v1.CoreService/FetchOps",
			opts...,
		),
		getProfile: connect_go.NewClient[v1.GetProfileRequest, v1.GetProfileResponse](
			httpClient,
			baseURL+"/core.v1.CoreService/GetProfile",
			opts...,
		),
	}
}

// coreServiceClient implements CoreServiceClient.
type coreServiceClient struct {
	sendMessage *connect_go.Client[v1.SendMessageRequest, v1.SendMessageResponse]
	fetchOps    *connect_go.Client[v1.FetchOpsRequest, v1.FetchOpsResponse]
	getProfile  *connect_go.Client[v1.GetProfileRequest, v1.GetProfileResponse]
}

// SendMessage calls core.v1.CoreService.SendMessage.
func (c *coreServiceClient) SendMessage(ctx context.Context, req *connect_go.Request[v1.SendMessageRequest]) (*connect_go.Response[v1.SendMessageResponse], error) {
	return c.sendMessage.CallUnary(ctx, req)
}

// FetchOps calls core.v1.CoreService.FetchOps.
func (c *coreServiceClient) FetchOps(ctx context.Context, req *connect_go.Request[v1.FetchOpsRequest]) (*connect_go.ServerStreamForClient[v1.FetchOpsResponse], error) {
	return c.fetchOps.CallServerStream(ctx, req)
}

// GetProfile calls core.v1.CoreService.GetProfile.
func (c *coreServiceClient) GetProfile(ctx context.Context, req *connect_go.Request[v1.GetProfileRequest]) (*connect_go.Response[v1.GetProfileResponse], error) {
	return c.getProfile.CallUnary(ctx, req)
}

// CoreServiceHandler is an implementation of the core.v1.CoreService service.
type CoreServiceHandler interface {
	SendMessage(context.Context, *connect_go.Request[v1.SendMessageRequest]) (*connect_go.Response[v1.SendMessageResponse], error)
	FetchOps(context.Context, *connect_go.Request[v1.FetchOpsRequest], *connect_go.ServerStream[v1.FetchOpsResponse]) error
	GetProfile(context.Context, *connect_go.Request[v1.GetProfileRequest]) (*connect_go.Response[v1.GetProfileResponse], error)
}

// NewCoreServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCoreServiceHandler(svc CoreServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/core.v1.CoreService/SendMessage", connect_go.NewUnaryHandler(
		"/core.v1.CoreService/SendMessage",
		svc.SendMessage,
		opts...,
	))
	mux.Handle("/core.v1.CoreService/FetchOps", connect_go.NewServerStreamHandler(
		"/core.v1.CoreService/FetchOps",
		svc.FetchOps,
		opts...,
	))
	mux.Handle("/core.v1.CoreService/GetProfile", connect_go.NewUnaryHandler(
		"/core.v1.CoreService/GetProfile",
		svc.GetProfile,
		opts...,
	))
	return "/core.v1.CoreService/", mux
}

// UnimplementedCoreServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCoreServiceHandler struct{}

func (UnimplementedCoreServiceHandler) SendMessage(context.Context, *connect_go.Request[v1.SendMessageRequest]) (*connect_go.Response[v1.SendMessageResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("core.v1.CoreService.SendMessage is not implemented"))
}

func (UnimplementedCoreServiceHandler) FetchOps(context.Context, *connect_go.Request[v1.FetchOpsRequest], *connect_go.ServerStream[v1.FetchOpsResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("core.v1.CoreService.FetchOps is not implemented"))
}

func (UnimplementedCoreServiceHandler) GetProfile(context.Context, *connect_go.Request[v1.GetProfileRequest]) (*connect_go.Response[v1.GetProfileResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("core.v1.CoreService.GetProfile is not implemented"))
}
